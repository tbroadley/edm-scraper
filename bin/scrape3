#!/usr/bin/env ruby
# frozen_string_literal: true

require 'capybara'
require 'capybara/dsl'
require 'capybara/poltergeist'

require_relative '../environment'

include Capybara::DSL

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(app, js_errors: false, phantomjs_options: [
                                      '--ssl-protocol=tlsv1.2',
                                    ])
end

Capybara.default_driver = :poltergeist
Capybara.default_max_wait_time = 0.1

def text_by_itemprop(element, itemprop)
  element.find("[itemprop=\"#{itemprop}\"]").text
end

def go(city)
  visit("https://www.ticketscene.ca/city/#{city}/")

  all('.row-event').each do |element|
    name = text_by_itemprop(element, 'name')

    venue_and_city = text_by_itemprop(element, 'location')
    city = text_by_itemprop(element, 'addressLocality')
    province = text_by_itemprop(element, 'addressRegion')
    venue = venue_and_city.sub(" #{city}, #{province}", '')

    date = Date.strptime(
      element.find('[itemprop="startDate"]', visible: :any)[:content],
      '%Y-%m-%d'
    )

    buy_button = element.first('.btn-buy')
    url = buy_button ? "https://www.ticketscene.ca#{buy_button[:href]}" : nil

    show = Show.new(
      name: name,
      venue: venue,
      start_date: date,
      end_date: date,
      url: url,
      filter: true
    )
    message = if show.save
                "Added new show: '#{show}'"
              else
                "Show '#{show}' already exists in database"
              end
    puts message
  end
end

send_email_if_rescue('scrape3') do
  go('kitchener')
  go('waterloo')
end
