#!/usr/bin/env ruby
# frozen_string_literal: true

require 'capybara'
require 'capybara/dsl'
require 'capybara/poltergeist'

require_relative '../environment'

include Capybara::DSL

Capybara.register_driver :poltergeist do |app|
  Capybara::Poltergeist::Driver.new(app, js_errors: false, phantomjs_options: [
                                      '--ssl-protocol=tlsv1.2',
                                    ])
end

Capybara.default_driver = :poltergeist
Capybara.default_max_wait_time = 0.1

def text_by_itemprop(element, itemprop)
  element.find("[itemprop=\"#{itemprop}\"]").text
end

def get_venue(element)
  venue_and_city = text_by_itemprop(element, 'location')
  city = text_by_itemprop(element, 'addressLocality')
  province = text_by_itemprop(element, 'addressRegion')
  venue_and_city.sub(" #{city}, #{province}", '')
end

def get_date(element)
  Date.strptime(
    element.find('[itemprop="startDate"]', visible: :any)[:content],
    '%Y-%m-%d'
  )
end

def get_url(element)
  buy_button = element.first('.btn-buy')
  buy_button ? "https://www.ticketscene.ca#{buy_button[:href]}" : nil
end

def show_parameters(element)
  {
    name: text_by_itemprop(element, 'name'),
    venue: get_venue(element),
    start_date: get_date(element),
    end_date: get_date(element),
    url: get_url(element),
    filter: true,
  }
end

def go(city)
  visit("https://www.ticketscene.ca/city/#{city}/")

  all('.row-event').each do |element|
    show = Show.new(show_parameters(element))
    puts show.save_and_return_message
  end
end

send_email_if_rescue('scrape3') do
  go('kitchener')
  go('waterloo')
end
